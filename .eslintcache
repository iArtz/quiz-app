[{"/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/components/Card.js":"1","/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/components/Header.js":"2","/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/components/Home.js":"3","/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/components/Navigation.js":"4","/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/components/Signin.js":"5","/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/containers/App.js":"6","/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/index.js":"7","/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/serviceWorker.js":"8","/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/setupTests.js":"9","/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/test/App.test.js":"10"},{"size":1212,"mtime":1576577053275,"results":"11","hashOfConfig":"12"},{"size":157,"mtime":1576577263286,"results":"13","hashOfConfig":"12"},{"size":1001,"mtime":1576572619506,"results":"14","hashOfConfig":"12"},{"size":508,"mtime":1576572619507,"results":"15","hashOfConfig":"12"},{"size":795,"mtime":1576577192889,"results":"16","hashOfConfig":"12"},{"size":151,"mtime":1576572619507,"results":"17","hashOfConfig":"12"},{"size":510,"mtime":1576572619508,"results":"18","hashOfConfig":"12"},{"size":5019,"mtime":1576572619508,"results":"19","hashOfConfig":"20"},{"size":255,"mtime":1575620729000,"results":"21","hashOfConfig":"12"},{"size":286,"mtime":1576577120147,"results":"22","hashOfConfig":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cer5w8",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":3,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"g7ajaz",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1rg3fnq","/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/components/Card.js",[],"/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/components/Header.js",[],"/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/components/Home.js",[],"/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/components/Navigation.js",[],"/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/components/Signin.js",[],"/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/containers/App.js",[],"/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/index.js",[],"/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/serviceWorker.js",["45","46","47","48","49","50","51","52"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/setupTests.js",[],"/Users/kanitphong/Documents/Sites/Projects/Javascript/NodeJS/quiz-app/src/test/App.test.js",["53","54"],{"ruleId":"55","severity":2,"message":"56","line":39,"column":9,"nodeType":"57","endLine":39,"endColumn":32},{"ruleId":"58","severity":1,"message":"59","line":44,"column":11,"nodeType":"60","messageId":"61","endLine":44,"endColumn":22},{"ruleId":"55","severity":2,"message":"62","line":51,"column":9,"nodeType":"57","endLine":51,"endColumn":24},{"ruleId":"63","severity":2,"message":"64","line":61,"column":7,"nodeType":"57","endLine":61,"endColumn":19},{"ruleId":"58","severity":1,"message":"59","line":72,"column":15,"nodeType":"60","messageId":"61","endLine":72,"endColumn":26},{"ruleId":"58","severity":1,"message":"59","line":85,"column":15,"nodeType":"60","messageId":"61","endLine":85,"endColumn":26},{"ruleId":"58","severity":1,"message":"59","line":97,"column":7,"nodeType":"60","messageId":"61","endLine":97,"endColumn":20},{"ruleId":"58","severity":1,"message":"59","line":125,"column":7,"nodeType":"60","messageId":"61","endLine":125,"endColumn":18},{"ruleId":"65","severity":2,"message":"66","line":5,"column":1,"nodeType":"57","messageId":"67","endLine":5,"endColumn":5},{"ruleId":"65","severity":2,"message":"68","line":8,"column":3,"nodeType":"57","messageId":"67","endLine":8,"endColumn":9},"no-use-before-define","'checkValidServiceWorker' was used before it was defined.","Identifier","no-console","Unexpected console statement.","MemberExpression","unexpected","'registerValidSW' was used before it was defined.","no-param-reassign","Assignment to property of function parameter 'registration'.","no-undef","'test' is not defined.","undef","'expect' is not defined."]